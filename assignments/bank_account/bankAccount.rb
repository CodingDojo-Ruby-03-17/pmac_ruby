class Account

    attr_accessor :checking_account_number, :savings_account_number, :checking_balance, :savings_balance, :total_balance
    @@total_balance = 0
    @@total_accounts = 0

# account_balances = {
#     checking => "checking_balance",
#     savings => "savings_balance"
# }
    def initialize(account_type, ammount)
        @account_type = account_type
        @ammount = ammount
        puts "Creating a new account!"
        puts "You created a #{@account_type} account, with #{@ammount} in it!"
    end


    # private

    def create_account(account_type, balance)
        @account_type = account_type
        puts "Creating a #{account_type} account!"
        account_number = rand(999999)
        puts "Your #{account_type} account number is: " + account_number.to_s
        # balance = rand.round(2)
        # puts balance
        puts "completed creating a #{account_type} account!"
    end

    def interest_rate
        @interest = 0.01
    end
end

account_1 = Account.new("Checking", 0)




    # def deposit(account_type, ammount)
    #     puts "Making a deposit!"
    #     # check for account type
    #     # do math on balance
    #     # return new balance
    # end
    #
    # def withdraw(account_type, ammount)
    #     puts "Making a withdrawal!"
    #     # check for account type
    #     # do math on balance
    #     # return error if funds insufficient
    #     if @ammount > self.total_balance { raise "Insufficient funds" }
    # end
    #
    # def display_account_number(account_type)
    #     puts "in the display accounts number method!"
    #     @account_type = account_type
    #     account_type == "checking" { puts @checking_account_number }
    #     account_type == "savings" { puts @savings_account_number }
    #     puts "completed displaying acct number!"
    # end
    #
    # def total_balance
    #     puts "validating the total balance!"
    #     checking_balance = account_balances.checking
    #     savings_balance = account_balances.savings
    #     total_balance = checking_balance + savings_balance
    #     total_balance
    #     # do math via balance methods on both accounts
    #     # puts balance
    # end



=begin
BankAccount should have a method that returns a user's account number, account number should be generated by a private method, account number should be random
BankAccount should have a method that returns the user's checking account balance
BankAccount should have a method that returns the user's saving account balance

BankAccount should allow a user to deposit money into either their checking or saving account

BankAccount should allow a user to withdraw money from one of their accounts, return an error if there are insufficient funds

BankAccount should allow the user to view the total amount of money they have at the bank
BankAccount should track how many accounts the bank currently has Add an interest_rate attribute that is not accessible by the user. Set it to 0.01 BankAccount should have a method called account_information that displays the users account number, total money, checking account balance, saving account balance and interest rate

=end
